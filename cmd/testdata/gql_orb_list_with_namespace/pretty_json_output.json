{
  "namespace": "circleci",
  "orbs": [
    {
      "name": "circleci/aws-cli",
      "statistics": {
        "last30DaysBuildCount": 0,
        "last30DaysProjectCount": 0,
        "last30DaysOrganizationCount": 0
      },
      "version": "Not published",
      "versions": []
    },
    {
      "name": "circleci/aws-code-deploy",
      "statistics": {
        "last30DaysBuildCount": 0,
        "last30DaysProjectCount": 0,
        "last30DaysOrganizationCount": 0
      },
      "version": "Not published",
      "versions": []
    },
    {
      "name": "circleci/aws-s3",
      "statistics": {
        "last30DaysBuildCount": 0,
        "last30DaysProjectCount": 0,
        "last30DaysOrganizationCount": 0
      },
      "version": "Not published",
      "versions": []
    },
    {
      "name": "circleci/circleci-cli",
      "statistics": {
        "last30DaysBuildCount": 0,
        "last30DaysProjectCount": 0,
        "last30DaysOrganizationCount": 0
      },
      "version": "Not published",
      "versions": []
    },
    {
      "version": "0.0.3",
      "versions": [
        {
          "source": "version: 2.1\n\ndescription: Commands for calling the Rollbar API\n\ncommands:\n  notify_deploy:\n    description: |\n      A step to notify Rollbar the project has been deployed.\n      A Rollbar access token is required to be set in the\n      environment with the name `ROLLBAR_ACCESS_TOKEN`.\n      Add this as the last step of your the job that you\n      use to deploy.\n    parameters:\n      environment:\n        type: string\n        default: production\n        description: The Rollbar environment. Defaults to production.\n    steps:\n      - run:\n          name: Notify Rollbar\n          command: |\n            curl https://api.rollbar.com/api/1/deploy/ \\\n              --form access_token=$ROLLBAR_ACCESS_TOKEN \\\n              --form environment=\u003c\u003c paramters.environment \u003e\u003e \\\n              --form revision=$CIRCLE_SHA1 \\\n              --form local_username=$CIRCLE_USERNAME\n\njobs:\n  notify_deploy:\n    description: |\n      A job to notify Rollbar the project has been deployed.\n      A Rollbar access token is required to be set in the\n      environment with the name `ROLLBAR_ACCESS_TOKEN`.\n    parameters:\n      environment:\n        type: string\n        default: production\n        description: The Rollbar environment. Defaults to production.\n    docker:\n      - image: circleci/buildpack-deps:18.04-scm\n    steps:\n      - notify_deploy\n",
          "version": "0.0.1"
        },
        {
          "source": "description: provides a job for reporting code coverage of clojure projects to codecov\ncommands:\n  upload:\n    parameters:\n      path:\n        description: Path to the code coverage data file to upload.\n        type: string\n    steps:\n    - run:\n        name: Upload Coverage Results\n        command: |\n          curl --request POST --retry 3 --silent --show-error --fail --data-binary @<< parameters.path >> \\\n          \"https://codecov.io/upload/v2?service=circleci\\\n          &token=$CODECOV_TOKEN\\\n          &commit=$CIRCLE_SHA1\\\n          &branch=$CIRCLE_BRANCH\\\n          &build=$CIRCLE_BUILD_NUM\\\n          &job=$CIRCLE_NODE_INDEX\\\n          &build_url=$CIRCLE_BUILD_URL\\\n          &slug=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME\\\n          &pr=$CIRCLE_PR_NUMBER\"\njobs:\n  code-coverage:\n    parameters:\n      coverage-file:\n        description: the path to coverage.json\n        type: string\n        default: target/coverage/codecov.json\n      cache-key:\n        description: cache key to use, if this is likely to share cache with another job. currently only supports one key.\n        type: string\n        default: code-coverage-{{ checksum \"project.clj\" }}\n      circlecitest:\n        description: tests are run with the circleci.test test runner instead of clojure.test\n        type: boolean\n        default: false\n    docker:\n    - image: circleci/clojure\n    steps:\n    - checkout\n    - restore_cache:\n        keys:\n        - << parameters.cache-key >>\n    - run: lein cloverage --codecov <<# parameters.circlecitest >> --runner circleci.test <</ parameters.circlecitest >>\n    - save_cache:\n        paths:\n        - ~/.m2\n        - ~/.lein\n        key: << parameters.cache-key >>\n    - store_artifacts:\n        path: target/coverage\n    - upload:\n        path: << parameters.coverage-file >>\n",
          "version": "0.0.2"
        }
      ],
      "name": "circleci/codecov-clojure",
      "statistics": {
        "last30DaysBuildCount": 0,
        "last30DaysProjectCount": 0,
        "last30DaysOrganizationCount": 0
      }
    },
    {
      "name": "circleci/delete-me",
      "statistics": {
        "last30DaysBuildCount": 0,
        "last30DaysProjectCount": 0,
        "last30DaysOrganizationCount": 0
      },
      "version": "Not published",
      "versions": []
    },
    {
      "name": "circleci/delete-me-too",
      "statistics": {
        "last30DaysBuildCount": 0,
        "last30DaysProjectCount": 0,
        "last30DaysOrganizationCount": 0
      },
      "version": "Not published",
      "versions": []
    },
    {
      "versions": [
        {
          "source": "executor:\n  gradle:\n    description: The docker container to use when running Gradle builds\n    docker:\n      - image: circleci/openjdk:8-jdk-node\n    environment:\n      # Disable fancy terminal updates\n      TERM: dumb\n\ncommands:\n  with_cache:\n    description: |\n      Run a set of steps with gradle dependencies cached.\n\n      This command will first restore a cache of gradle dependencies, if one was\n      saved by a previous build. The provided `steps` will then be executed, and\n      if successful, then a fresh cache will be saved, if required.\n\n      The contents of the `~/.gradle` directory is cached, which will substantially\n      improve build times for projects with many dependencies.\n\n      The cache-key is generated from any files named `build.gradle` that are\n      present in the `working_directory`.\n    parameters:\n      steps:\n        type: steps\n    steps:\n      - run:\n          name: Generate Cache Checksum\n          command: find . -name 'build.gradle' -exec cat {} + | shasum | awk '{print $1}' > /tmp/gradle_cache_seed\n      - restore_cache:\n          key: gradle-{{ checksum \"/tmp/gradle_cache_seed\" }}\n      - << parameters.steps >>\n      - save_cache:\n          paths:\n            - ~/.gradle\n          key: gradle-{{ checksum \"/tmp/gradle_cache_seed\" }}\n\njobs:\n  test:\n    description: |\n      Checkout, build and test a gradle project.\n    executor: gradle\n    parameters:\n      test_command:\n        type: string\n        default: test\n    steps:\n      - checkout\n      - with_cache:\n          steps:\n            - run:\n                name: Run Tests\n                command: ./gradlew << parameters.test_command >>\n",
          "version": "0.0.1"
        }
      ],
      "version": "0.0.1",
      "name": "circleci/gradle",
      "statistics": {
        "last30DaysBuildCount": 0,
        "last30DaysProjectCount": 0,
        "last30DaysOrganizationCount": 0
      }
    },
    {
      "name": "circleci/heroku",
      "statistics": {
        "last30DaysBuildCount": 0,
        "last30DaysProjectCount": 0,
        "last30DaysOrganizationCount": 0
      },
      "version": "Not published",
      "versions": []
    },
    {
      "versions": [
        {
          "source": "version: 2.1\n\ndescription: Commands for calling the Rollbar API\n\ncommands:\n  notify_deploy:\n    description: |\n      A step to notify Rollbar the project has been deployed.\n      A Rollbar access token is required to be set in the\n      environment with the name `ROLLBAR_ACCESS_TOKEN`.\n      Add this as the last step of your the job that you\n      use to deploy.\n    parameters:\n      environment:\n        type: string\n        default: production\n        description: The Rollbar environment. Defaults to production.\n    steps:\n      - run:\n          name: Notify Rollbar\n          command: |\n            curl https://api.rollbar.com/api/1/deploy/ \\\n              --form access_token=$ROLLBAR_ACCESS_TOKEN \\\n              --form environment=<< paramters.environment >> \\\n              --form revision=$CIRCLE_SHA1 \\\n              --form local_username=$CIRCLE_USERNAME\n\njobs:\n  notify_deploy:\n    description: |\n      A job to notify Rollbar the project has been deployed.\n      A Rollbar access token is required to be set in the\n      environment with the name `ROLLBAR_ACCESS_TOKEN`.\n    parameters:\n      environment:\n        type: string\n        default: production\n        description: The Rollbar environment. Defaults to production.\n    docker:\n      - image: circleci/buildpack-deps:18.04-scm\n    steps:\n      - notify_deploy\n",
          "version": "0.0.1"
        }
      ],
      "version": "0.0.1",
      "name": "circleci/rollbar",
      "statistics": {
        "last30DaysBuildCount": 0,
        "last30DaysProjectCount": 0,
        "last30DaysOrganizationCount": 0
      }
    }
  ]
}

version: 2.1

orbs:
  codecov: circleci/codecov-clojure@0.0.4
  shellcheck: circleci/shellcheck@1.2.0
  slack: circleci/slack@0.1.14
  windows: circleci/windows@2.2.0

executors:
  go:
    docker:
      - image: circleci/golang:1.12.15
    environment:
      CGO_ENABLED: 0
  mac:
    macos:
      xcode: 11.3.1
    environment:
      CGO_ENABLED: 0
      HOMEBREW_NO_AUTO_UPDATE: 1
      TERM: xterm-256color

commands:
  force-http-1:
    steps:
      - run:
          # Uploading to codecov has been failing due to HTTP 2.0 issues.
          # https://app.circleci.com/jobs/github/CircleCI-Public/circleci-cli/6480
          #     curl: (92) HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)
          # The issue seems to be on the server-side, so force HTTP 1.1
          name: 'cURL: Force HTTP 1.1'
          command: echo '--http1.1' >> ~/.curlrc
  build-docker-image:
    steps:
      - run:
          name: Build Latest Docker Image
          command: |
            docker build -t circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM .
            docker run --rm circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM circleci update check
  build-alpine-image:
    steps:
      - run:
          name: Build Alpine Docker Image
          command: |
            docker build -t circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM-alpine --file Dockerfile.alpine .
            docker run --rm circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM-alpine update check
  deploy-save-cache-workspace-and-artifacts:
    steps:
      - save_cache:
          key: v4-goreleaser-{{ checksum "~/goreleaser_amd64.deb" }}
          paths: [~/goreleaser_amd64.deb]
      - persist_to_workspace:
          root: .
          paths:
            - "dist"
      - store_artifacts:
          path: ./dist
          destination: dist
  install-goreleaser:
    parameters:
      GORELEASER_URL:
        type: string
        default: https://github.com/goreleaser/goreleaser/releases/download/v0.127.0/goreleaser_amd64.deb
    steps:
      - restore_cache:
          keys: [v4-goreleaser-]
      - run:
          name: Install GoReleaser
          command: |
            [ -f ~/goreleaser_amd64.deb ] || curl --silent --location --fail --retry 3 << parameters.GORELEASER_URL >> > ~/goreleaser_amd64.deb
            sudo apt-get update -y
            sudo apt install ~/goreleaser_amd64.deb
  gomod:
    steps:
      - restore_cache:
          keys: ["v2-gomod-{{ arch }}-"]
      - run:
          name: Download go module dependencies
          command: go mod download
      - save_cache:
          key: v2-gomod-{{ arch }}-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod  # Linux
            - ~/go/pkg/mod # macOS
  # Wrap the slack/status command to only notify on failures
  slack-notify-on-failure:
    steps:
      - slack/status:
          fail_only: "true"
          only_for_branch: "master"

jobs:
  test_windows:
    executor: windows/default
    steps:
      - run: git config --global core.autocrlf false
      - checkout
      - run: setx GOPATH %USERPROFILE%\go
      - run: go get gotest.tools/gotestsum
      - run: mkdir test_results
      - run:
          name: Run tests
          command: |
            C:\Users\circleci\go\bin\gotestsum.exe --junitfile test_results/windows.xml
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results
  test_mac:
    executor: mac
    steps:
      - checkout
      - run: |
          brew install go@1.12
          echo 'export PATH="/usr/local/opt/go@1.12/bin:$PATH"' >> ~/.bash_profile
      - gomod
      - run: make test
      - slack-notify-on-failure
  build:
    executor: go
    steps:
      - checkout
      - gomod
      - run: make
      - persist_to_workspace:
          root: .
          paths:
            - "build"
  cucumber:
    docker:
      - image: cimg/ruby:2.7
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Install CLI tool from workspace"
          command: sudo cp ~/project/build/linux/amd64/circleci /usr/local/bin/
      - run:
          command: bundle install
          working_directory: integration_tests
      - run:
          command: bundle exec cucumber
          working_directory: integration_tests

  test:
    executor: go
    steps:
      - checkout
      - gomod
      - run: make test
      - slack-notify-on-failure

  coverage:
    executor: go
    environment:
      CGO_ENABLED: 1
    steps:
      - checkout
      - force-http-1
      - gomod
      - run: make cover
      - store_artifacts:
          path: ./coverage.txt
          destination: coverage.txt
      - codecov/upload:
          path: coverage.txt
      - slack-notify-on-failure

  docs:
    executor: go
    steps:
      - checkout
      - run: sudo apt-get install pandoc
      - gomod
      - run: go run main.go usage
      - store_artifacts:
          path: ./docs
          destination: docs
      - run: ./.circleci/generate-docs.sh
      - run: ./.circleci/deploy-gh-pages.sh
      - slack-notify-on-failure

  lint:
    executor: go
    steps:
      - checkout
      - run: make install-lint
      - run: make build
      - run: make lint
      - slack-notify-on-failure

  deploy-test:
    executor: go
    steps:
      - run:
          name: Skip this job if this is a forked pull request
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Forked PRs can't run this step."
              circleci step halt
            fi
      - checkout
      - install-goreleaser
      - gomod
      - run:
          name: Release
          command: |
            git config --global user.email $GH_EMAIL
            git config --global user.name $GH_NAME
            git tag -a "v0.1.$CIRCLE_BUILD_NUM" -m "Release v0.1.$CIRCLE_BUILD_NUM"
            goreleaser --skip-publish
      - setup_remote_docker:
          docker_layer_caching: true
      - build-docker-image
      - build-alpine-image
      - deploy-save-cache-workspace-and-artifacts
      - slack-notify-on-failure

  deploy:
    executor: go
    steps:
      - checkout
      - install-goreleaser
      - run:
          name: Tag Repo
          command: |
            git config --global user.email $GH_EMAIL
            git config --global user.name $GH_NAME
            git tag -a      "v0.1.$CIRCLE_BUILD_NUM" -m "Release v0.1.$CIRCLE_BUILD_NUM"
            git push origin "v0.1.$CIRCLE_BUILD_NUM"
      - gomod
      - run:
          name: Release
          command: goreleaser
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker Login
          command: docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
      - build-docker-image
      - run:
          name: Deploy Docker Image
          command: |
            docker push     circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM
            docker tag      circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM circleci/circleci-cli:latest
            docker push     circleci/circleci-cli:latest
      - build-alpine-image
      - run:
          name: Deploy Alpine Docker Image
          command: |
            docker push     circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM-alpine
            docker tag      circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM-alpine circleci/circleci-cli:alpine
            docker push     circleci/circleci-cli:alpine
      - deploy-save-cache-workspace-and-artifacts
      - slack-notify-on-failure

  snap:
    docker:
      - image: cibuilds/snapcraft:stable
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: |
          TAG=$(./dist/circleci-cli_linux_amd64/circleci version | cut -d' ' -f 1) && export TAG
          sed -i -- "s/%CLI_VERSION_PLACEHOLDER%/$TAG/g" snap/snapcraft.yaml
      - run: snapcraft
      - run:
          name: Publish to store
          command: |
            # The Snapcraft login file here will expire: 2021-03-05T18:12:13. A new one will need to be created then.
            mkdir .snapcraft
            echo $SNAPCRAFT_LOGIN_FILE | base64 --decode --ignore-garbage > .snapcraft/snapcraft.cfg
            snapcraft push *.snap --release stable
      - slack-notify-on-failure

  brew-deploy:
    executor: mac
    environment:
      - USER: circleci
      - TRAVIS: circleci
      - DESTDIR: /Users/distiller/dest
    steps:
      - checkout
      - force-http-1
      - run: |
          mkdir $DESTDIR
          curl -fLSs https://circle.ci/cli | DESTDIR="$DESTDIR" bash
      - run: |
          git config --global user.email "$GH_EMAIL" > /dev/null 2>&1
          git config --global user.name "$GH_NAME" > /dev/null 2>&1
      - run: brew --version
      - run: ./.circleci/brew-deploy.sh
      - slack-notify-on-failure

  trigger-chocolatey-deploy:
    docker:
      - image: cimg/base:edge
    steps:
      - run:
          name: Trigger Chocolatey repository build
          command: |
            curl -X POST https://circleci.com/api/v2/project/gh/CircleCI-Public/chocolatey-circleci-cli/pipeline \
              --fail --silent \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/json' \
              -H "Circle-Token: $CIRCLE_TOKEN" \
              --data '{ "parameters": { "deploy-production": true } }'

workflows:
  ci:
    jobs:
      - build
      - cucumber:
          requires: [build]
      - shellcheck/check:
          exclude: ./vendor/*
      - test
      - test_mac
      - test_windows
      - coverage
      - lint
      - deploy-test
      - docs:
          requires:
            - deploy
      - snap:
          requires:
            - deploy
      # Only deploy to homebrew after manual approval.
      - run-brew-deploy-gate:
          type: approval
          requires:
            - deploy
      - brew-deploy:
          requires:
            - run-brew-deploy-gate
      - deploy:
          requires:
            - test
            - test_mac
            - coverage
            - lint
            - deploy-test
            - shellcheck/check
          filters:
            branches:
              only: master
      - trigger-chocolatey-deploy:
          requires:
            - deploy
          filters:
            branches:
              only: master

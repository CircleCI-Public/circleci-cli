version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5
  shellcheck: circleci/shellcheck@1.2.0
  slack: circleci/slack@0.1.14

executors:
  go:
    docker:
      - image: circleci/golang:1.11
    environment:
      CGO_ENABLED: 0

commands:
  build-docker-image:
    steps:
      - run:
          name: Build Latest Docker Image
          command: |
            docker build -t circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM .
            docker run --rm circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM circleci update check
  build-alpine-image:
    steps:
      - run:
          name: Build Alpine Docker Image
          command: |
            docker build -t circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM-alpine --file Dockerfile.alpine .
            docker run --rm circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM-alpine update check
  deploy-save-cache-workspace-and-artifacts:
    steps:
      - save_cache:
          key: v3-goreleaser-{{ checksum "~/goreleaser_amd64.deb" }}
          paths: [~/goreleaser_amd64.deb]
      - persist_to_workspace:
          root: .
          paths:
            - "dist"
      - store_artifacts:
          path: ./dist
          destination: dist
  install-goreleaser:
    parameters:
      GORELEASER_URL:
        type: string
        default: https://github.com/goreleaser/goreleaser/releases/download/v0.94.0/goreleaser_amd64.deb
    steps:
      - restore_cache:
          keys: [v3-goreleaser-]
      - run:
          name: Install GoReleaser
          command: |
            [ -f ~/goreleaser_amd64.deb ] || curl --silent --location --fail --retry 3 << parameters.GORELEASER_URL >> > ~/goreleaser_amd64.deb
            sudo apt install ~/goreleaser_amd64.deb
  gomod:
    steps:
      - restore_cache:
          keys: [v1-gomod-]
      - run:
          name: Download go module dependencies
          command: go mod download
      - save_cache:
          key: v1-gomod-{{ checksum "go.sum" }}
          paths: [/go/pkg/mod]
  upload:
    parameters:
      token:
        description: The API token to use for uploading to Codecov.
        type: string
        default: $CODECOV_TOKEN
      path:
        description: Path to the code coverage data file to upload.
        type: string
    steps:
      - run:
          name: Upload Coverage Results
          command: |
            curl --request POST --retry 12 --max-time 10 --retry-delay 0 --retry-max-time 180 --silent --show-error --fail \
            --data-binary @<< parameters.path >> \
            "https://codecov.io/upload/v2?service=circleci\
            &token=<< parameters.token >>\
            &commit=$CIRCLE_SHA1\
            &branch=$CIRCLE_BRANCH\
            &build=$CIRCLE_BUILD_NUM\
            &job=$CIRCLE_NODE_INDEX\
            &build_url=$CIRCLE_BUILD_URL\
            &slug=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME\
            &pr=$CIRCLE_PR_NUMBER"
  # Wrap the slack/status command to only notify on failures
  slack-notify-on-failure:
    steps:
      - slack/status:
          fail_only: "true"
          only_for_branch: "master"

jobs:
  test:
    executor: go
    steps:
      - checkout
      - gomod
      - run: make test
      - slack-notify-on-failure

  coverage:
    executor: go
    environment:
      CGO_ENABLED: 1
    steps:
      - checkout
      - gomod
      - run: make cover
      - store_artifacts:
          path: ./coverage.txt
          destination: coverage.txt
      - upload:
          path: coverage.txt
      - slack-notify-on-failure

  docs:
    executor: go
    steps:
      - checkout
      - run: sudo apt-get install pandoc
      - gomod
      - run: go run main.go usage
      - store_artifacts:
          path: ./docs
          destination: docs
      - run: ./.circleci/generate-docs.sh
      - run: ./.circleci/deploy-gh-pages.sh
      - slack-notify-on-failure

  lint:
    executor: go
    steps:
      - checkout
      - run: make install-lint
      - run: make build
      - run: make lint
      - slack-notify-on-failure

  deploy-test:
    executor: go
    steps:
      - checkout
      - install-goreleaser
      - gomod
      - run:
          name: Release
          command: goreleaser --skip-publish --skip-validate
      - setup_remote_docker:
          docker_layer_caching: true
      - build-docker-image
      - build-alpine-image
      - deploy-save-cache-workspace-and-artifacts
      - slack-notify-on-failure

  deploy:
    executor: go
    steps:
      - checkout
      - install-goreleaser
      - run:
          name: Tag Repo
          command: |
            git config --global user.email $GH_EMAIL
            git config --global user.name $GH_NAME
            git tag -a      "v0.1.$CIRCLE_BUILD_NUM" -m "Release v0.1.$CIRCLE_BUILD_NUM"
            git push origin "v0.1.$CIRCLE_BUILD_NUM"
      - gomod
      - run:
          name: Release
          command: goreleaser
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker Login
          command: docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
      - build-docker-image
      - run:
          name: Deploy Docker Image
          command: |
            docker push     circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM
            docker tag      circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM circleci/circleci-cli:latest
            docker push     circleci/circleci-cli:latest
      - build-alpine-image
      - run:
          name: Deploy Alpine Docker Image
          command: |
            docker push     circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM-alpine
            docker tag      circleci/circleci-cli:0.1.$CIRCLE_BUILD_NUM-alpine circleci/circleci-cli:alpine
            docker push     circleci/circleci-cli:alpine
      - deploy-save-cache-workspace-and-artifacts
      - slack-notify-on-failure

  snap:
    docker:
      - image: cibuilds/snapcraft:stable
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: |
          export TAG=$(./dist/linux_amd64/circleci version)
          sed -i -- "s/%CLI_VERSION_PLACEHOLDER%/$TAG/g" snap/snapcraft.yaml
      - run: snapcraft
      - run:
          name: Publish to store
          command: |
            # The Snapcraft login file here will expire March 1st, 2022. A new one will need to be created then.
            mkdir .snapcraft
            echo $SNAPCRAFT_LOGIN_FILE | base64 --decode --ignore-garbage > .snapcraft/snapcraft.cfg
            snapcraft push *.snap --release stable
      - slack-notify-on-failure

  brew-deploy:
    macos:
      xcode: "10.0.0"
    environment:
      - USER: circleci
      - TRAVIS: circleci
      - DESTDIR: /Users/distiller/dest
    steps:
      - checkout
      - run: |
          mkdir $DESTDIR
          curl -fLSs https://circle.ci/cli | DESTDIR="$DESTDIR" bash
      - run: |
          git config --global user.email "$GH_EMAIL" > /dev/null 2>&1
          git config --global user.name "$GH_NAME" > /dev/null 2>&1
      - run: brew --version
      - run: ./.circleci/brew-deploy.sh
      - slack-notify-on-failure

workflows:
  version: 2
  ci:
    jobs:
      - shellcheck/check:
          exclude: ./vendor/*
      - test
      - coverage
      - lint
      - deploy-test
      - docs:
          requires:
            - deploy
      - snap:
          requires:
            - deploy
      - deploy:
          requires:
            - test
            - coverage
            - lint
            - deploy-test
            - shellcheck/check
          filters:
            branches:
              only: master
  weekly:
    triggers:
      - schedule:
          cron: "0 23 * * 0"
          filters:
            branches:
              only:
                - master
    jobs:
      - run-brew-deploy-gate:
          type: approval
      - brew-deploy:
          requires:
            - run-brew-deploy-gate
